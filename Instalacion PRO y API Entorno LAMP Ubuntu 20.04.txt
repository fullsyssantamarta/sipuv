INSTALACION API Y PRO ENTORNO UBUNTU 20.04 - API LAMP - FACTURADOR DOCKER

- Abrir puertos 80, 81, 443, 3306, 3308
- Accesos ssh del vps en ubuntu 20.04
- Accesos al panel del dominio
- Accesos a los repositorios

INSTALACION DEL FACTURADOR

- Iniciar una consola SSH al VPS con putty
- sudo su
- Abrir el archivo installPRO2.sh que se encuentra en el repositorio, lo copiamos y lo pegamos en la consola ssh
- vim instalPRO2.sh y luego pegar el contenido en la consola, se guarda con :w y se sale con :q
- chmod 700 installPRO2.sh
- ./installPRO2.sh midominio.com - Esperar a que el proceso avance
- Ingresar credenciales del repositorio
- docker ps
- Aparece un listado de contenedores, debemos ingresar al contenedor que tenga en su nombre "fpm"
	docker exec -ti nombredelcontenedor bash
- Modificar el archivo .env con el comando nano .env guardo con Ctrl+O y salgo con Ctrl+X
- Borrar caches con el comando: php artisan config:cache && php artisan config:clear && php artisan cache:clear
- Salir del contenedor con exit 

INSTALACION DE LA API

- apt-get update
- apt-get -y install software-properties-common
- apt-get -y install python-software-properties
- add-apt-repository ppa:ondrej/php - Presinar Enter
- Instalar php con el comando: apt-get -y install php7.3 php7.3-mbstring php7.3-soap php7.3-zip php7.3-mysql php7.3-curl php7.3-gd php7.3-xml php7.3-intl git curl zip unzip php7.3-intl php7.3-imap
- Si no se instalo apache, se instala con: apt-get -y install apache2
- Cambiar puerto apache con: nano /etc/apache2/ports.conf
- Reinciar apache con: service apache2 restart
- Instalar mariadb con los siguientes comandos:
	- apt update
	- apt install mariadb-server
- Cambiar puerto de base de datos api con: nano /etc/mysql/mariadb.conf.d/50-server.cnf
- Reiniciar mysql con: service mysql restart
- Ejecutar: mysql_secure_installation
- Crear usuarios y base de datos mysql: mysql -u root

	CREATE USER 'nombreusuarioapi'@'localhost' IDENTIFIED BY 'passwordusuariobd';
	GRANT ALL PRIVILEGES ON * . * TO 'integratesoftcomco'@'localhost';
	FLUSH PRIVILEGES;

	CREATE USER 'nombreusuarioapi'@'%' IDENTIFIED BY 'passwordusuariobd';
	GRANT ALL PRIVILEGES ON * . * TO 'nombreusuarioapi'@'%';
	FLUSH PRIVILEGES;

	CREATE DATABASE apidian CHARACTER SET utf8 COLLATE utf8_spanish_ci;

	exit
- Instalar composer con los siguientes comandos:
	curl -sS https://getcomposer.org/installer | php
	mv composer.phar /usr/local/bin/composer
- Clonar repositorio api: git clone https://gitlab.torresoftware.com/TorreSoftware/apidian2025.git apidian
- cd apidian
- cp .env.example .env
- Editar el achivo .env con: nano .env
- Instalar dependencias:
	- rm composer.lock
	- composer install
- php artisan config:cache && php artisan cache:clear
- php artisan key:generate
- php artisan migrate --seed
- unzip storage.zip - Seleccionar la opcion All
- chmod -R 777 storage
- chmod -R 777 bootstrap/cache
- chmod -R 777 vendor/mpdf/mpdf
- php artisan storage:link
- chmod 700 urn_on.sh
- ./urn_on.sh
- cd /etc/apache2/sites-available/
- touch api.conf
- nano api.conf - Pegar lo siguiente modificando lo neceseario segun su instalacion:
	<VirtualHost *:81>
	 ServerAdmin admin@example.com
	 DocumentRoot /var/www/html/apidian/public
	 <Directory /var/www/html/apidian/public>
	 Options +FollowSymlinks
	 AllowOverride All
	 Require all granted
	 </Directory>
	 ErrorLog ${APACHE_LOG_DIR}/error.log
	 CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>

Ejecutar los siguientes comandos:
	- a2dissite 000-default.conf
	- a2ensite api.conf
	- a2enmod rewrite
	- service apache2 restart
- cd /var/www/html/apidian
- php artisan config:cache && php artisan config:clear && php artisan cache:clear












